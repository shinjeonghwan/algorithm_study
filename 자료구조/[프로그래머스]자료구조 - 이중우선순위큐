#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <algorithm>
#include <iostream>

using namespace std;

deque<int> DQ;
priority_queue<int> PQ;

vector<int> solution(vector<string> operations) {
    vector<int> answer;
    
    for(int i = 0; i < operations.size(); i++){
        //cout << operations[i] << '\n';
        if(operations[i][0] == 'I'){
            string s_tmp = "";
            s_tmp = operations[i].substr(2);
            int tmp = stoi(s_tmp);
            DQ.push_back(tmp);
            sort(DQ.begin(), DQ.end());
        }
        else if(operations[i][0] == 'D' && !DQ.empty()){
            if(operations[i][2] == '-'){
                DQ.pop_front();
            }
            else{
                DQ.pop_back();
            }
        }
    }
    
    if(!DQ.empty()){
        answer.push_back(DQ[DQ.size()-1]);
        answer.push_back(DQ[0]);
    }
    else{
        answer.push_back(0);
        answer.push_back(0);
    }
    
    return answer;
}
