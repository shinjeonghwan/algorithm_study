import sys
from collections import deque
sys.setrecursionlimit(1000000000)

def solution(N, graph):
    L = int(input())
    snake = deque()
    snake.append((0,0))
    flag = False   #게임 종료 시그널
    cnt = 0
    prev_X = 0
    direction = 1      #초기 시작방향이 오른쪽이므로
    #     상, 우, 하, 좌 이동
    dy = [-1, 0, 1, 0]       #행
    dx = [0, 1, 0, -1]       #열

    for _ in range(L):
        X, C = input().split()
        X = int(X)
        real_do_time = X - prev_X
        while real_do_time != 0:
            real_do_time -= 1
            cnt += 1
            y, x = snake.popleft()
            ny = y + dy[direction]
            nx = x + dx[direction]
            if -1 < nx < N and -1 < ny < N and (ny, nx) not in snake:    #게임이 진행 중
                if graph[ny][nx] == 4:    #다음 위치가 사과면
                    graph[ny][nx] = 0
                    snake.appendleft((y, x))
                    snake.appendleft((ny, nx))
                else:                     #사과가 아니면
                    snake.appendleft((y, x))
                    snake.appendleft((ny, nx))
                    snake.pop()
            else:                                                       #게임이 종료되면 : 벽에 부딪히거나, 뱀이 스스로 몸에 부딪히거나
                flag = True
                break

        if flag:
            break

        if C == "L":
            direction = (direction - 1) %4
        else:
            direction = (direction + 1) %4
        prev_X = X
    else:
        while flag == False:
            cnt += 1
            y, x = snake.popleft()
            ny = y + dy[direction]
            nx = x + dx[direction]
            if -1 < nx < N and -1 < ny < N and (ny, nx) not in snake:  # 게임이 진행 중
                if graph[ny][nx] == 4:  # 다음 위치가 사과면
                    graph[ny][nx] = 0
                    snake.appendleft((y, x))
                    snake.appendleft((ny, nx))
                else:  # 사과가 아니면
                    snake.appendleft((y, x))
                    snake.appendleft((ny, nx))
                    snake.pop()
            else:  # 게임이 종료되면 : 벽에 부딪히거나, 뱀이 스스로 몸에 부딪히거나
                flag = True
                break

    print(cnt)


if __name__ == '__main__':
    N = int(input())
    graph = [[0]*N for _ in range(N)]

    K = int(input())
    for _ in range(K):
        x, y = map(int, input().split())
        graph[x-1][y-1] = 4   #사과가 있는 위치
    graph[0][0] = 0   #뱀의 시작점, 뱀이 점유한 위치 == 1
    solution(N, graph)
