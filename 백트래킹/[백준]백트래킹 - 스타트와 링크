#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>

using namespace std;

int board[21][21];
int N;
int team_member_cnt;
int answer = 101;

vector<int> team_A;
vector<int> team_B;

bool team_A_chk[21];

void backtracking(int idx, int Depth) {
	if (Depth == team_member_cnt) {
		//숫자계산해주고 정산. 최소값 처리.
		int A_sum = 0;
		int B_sum = 0;

		for(int i = 1; i <= N; i++){
			if (team_A_chk[i] == false) {
				team_B.push_back(i);
			}
		}

		for (int i = 0; i < team_member_cnt; i++) {
			for (int j = 0; j < team_member_cnt; j++) {
				if (i == j) continue;
				A_sum += board[team_A[i]][team_A[j]];
			}
		}

		for (int i = 0; i < team_member_cnt; i++) {
			for (int j = 0; j < team_member_cnt; j++) {
				if (i == j) continue;
				B_sum += board[team_B[i]][team_B[j]];
			}
		}

		answer = min(answer, abs(A_sum - B_sum));
		team_B.clear();

		return;
	}

	for (int i = idx+1; i <= N; i++) {
		team_A.push_back(i);
		team_A_chk[i] = true;
		backtracking(i, Depth + 1);
		team_A.pop_back();
		team_A_chk[i] = false;
	}
	return;
}



int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	cin >> N;
	team_member_cnt = N / 2;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> board[i][j];
		}
	}

	backtracking(0, 0);

	cout << answer;

	return 0;
}
