#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <queue>
#include <vector>

using namespace std;


int N;
int numbers[100];
int op[4];    // 인덱스 순서대로 +, -, *, /

int answer_max = -1999999999;
int answer_min = 1999999999;


void bt(int cur_number, int Depth) {     // Depth는 사용한 숫자 갯수.  즉 N개 만큼 사용해야 끝나는 것.
	if (Depth == N) {
		answer_max = max(answer_max, cur_number);
		answer_min = min(answer_min, cur_number);
		return;
	}

	for (int i = 0; i < 4; i++) {
		int tmp_number = 0;
		if (op[i] > 0) {
			op[i]--;
			if (i == 0) {   // + 계산
				tmp_number = cur_number + numbers[Depth];
				bt(tmp_number, Depth + 1);
			}
			else if (i == 1) {  // - 계산
				tmp_number = cur_number - numbers[Depth];
				bt(tmp_number, Depth + 1);
			}
			else if (i == 2) {  // * 계산
				tmp_number = cur_number * numbers[Depth];
				bt(tmp_number, Depth + 1);
			}
			else if (i == 3) {  // / 계산
				tmp_number = cur_number / numbers[Depth];
				bt(tmp_number, Depth + 1);
			}
			op[i]++;
		}
	}
	return;
}


int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N;

	for (int i = 0; i < N; i++) {
		cin >> numbers[i];
	}

	for (int i = 0; i < 4; i++) {
		cin >> op[i];
	}

	bt(numbers[0], 1);
	cout << answer_max << '\n' << answer_min << '\n';

	return 0;
}
