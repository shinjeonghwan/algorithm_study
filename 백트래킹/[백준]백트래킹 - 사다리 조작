#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

int board[31][11];   // 아무것도 아닌 위치는 0,   아래로만 이동해야하면 1,  오른쪽으로 이동해야하면 2,   왼쪽으로 이동해야하면 3

int N, M, H;    // N이 세로선이고, H가 가로선 갯수다.  M은 지금 현재 존재하고있는 좌우 이동 사다리의 갯수.
int a, b;
int answer = 9999999;
bool answer_flag = false;


bool Run_board() {
	for (int i = 1; i <= N; i++) {       //1번부터 N번까지 차례대로 종점까지 진행
		int cur_row = 1;   // 가로 위치
		int cur_col = i;
		while (cur_row <= H) {  // H 만큼 내려왔으면 종료
			if (board[cur_row][cur_col] == 1) {
				cur_row++;
			}
			else if (board[cur_row][cur_col] == 2) {
				cur_row++;
				cur_col++;
			}
			else if (board[cur_row][cur_col] == 3) {
				cur_row++;
				cur_col--;
			}
		}
		if (cur_col != i) {
			return false;
		}
	}
	return true;
}

void Set_tmp_board(int idx, int Depth) {
	if (Depth >= 4 || answer <= Depth) {
		//더 안해도 됨.
		return;     // answer = -1일 것임.
	}


	// 사다리타기를 현재 Depth, tmp_board를 기준으로 수행시켜봄.
	if (Run_board()) {  // 정답이 출력되면 그때의 Depth값이 최종 정답이 됨.  
		answer = min(answer, Depth);
		return;
	}

	// 사다리 타기 수행 했는데 정답이 아니면, 사다리를 한개씩 놓고 정답을 찾아야 함. 
	for (int i = idx; i <= H; i++) {
		for (int j = 1; j <= N - 1; j++) {
			if (board[i][j] == 1 && board[i][j + 1] == 1) {
				board[i][j] = 2;
				board[i][j + 1] = 3;
				Set_tmp_board(i, Depth + 1);
				board[i][j] = 1;
				board[i][j + 1] = 1;
			}
			else {
				continue;
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	cin >> N >> M >> H;

	for (int i = 1; i <= H; i++) {
		for (int j = 1; j <= N; j++) {
			board[i][j] = 1;
		}
	}

	for (int i = 0; i < M; i++) {
		cin >> a >> b;
		board[a][b] = 2;
		board[a][b+1] = 3;
	}

	Set_tmp_board(1, 0);
	if (answer == 9999999) answer = -1;
	cout << answer;

	return 0;
}
