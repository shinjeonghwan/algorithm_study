DFS 


import sys
sys.setrecursionlimit(10000)
def solution(N):
    def dfs(x, y, num):
        if x <= -1 or x >= N or y <= -1 or y >= N:
            return False, num
        if graph[x][y] == 1:
            graph[x][y] = 0
            num += 1
            _, num = dfs(x - 1, y, num)
            _, num = dfs(x, y - 1, num)
            _, num = dfs(x + 1, y, num)
            _, num = dfs(x, y + 1, num)
            return True, num
        return False, num

    cnt = 0
    graph = []
    for i in range(N):
        graph.append(list(map(int, input())))

    apart_num = []
    for i in range(N):
        for j in range(N):
            num = 0
            a, b = dfs(i,j,num)
            if a == True:
                cnt += 1
                apart_num.append(b)
    print(cnt)
    apart_num.sort()
    for i in apart_num:
        print(i)

if __name__ == '__main__':
    N = int(input())
    solution(N)
    



---------------------------------------------------------

BFS 풀이

import sys
from collections import deque
sys.setrecursionlimit(10000)
def solution(N):
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]

    def bfs(x, y, num):
        Q = deque()
        Q.append((x, y))
        apt_num_cnt = 1
        while Q:
            x, y = Q.popleft()
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                if nx <= -1 or nx >= N or ny <= -1 or ny >= N:
                    continue
                if graph[nx][ny] == 0:
                    continue
                if graph[nx][ny] == 1:
                    graph[x][y] = 2
                    graph[nx][ny] = 2
                    apt_num_cnt = apt_num_cnt + 1
                    Q.append((nx, ny))
        return apt_num_cnt

    cnt = 0
    graph = []
    for i in range(N):
        graph.append(list(map(int, input())))

    apart_num = []
    for i in range(N):
        for j in range(N):
            num = 0
            if graph[i][j] == 0 or graph[i][j] >= 2:
                continue
            if graph[i][j] == 1:
                b = bfs(i,j,num)
                cnt += 1
                apart_num.append(b)
    print(cnt)
    apart_num.sort()
    for i in apart_num:
        print(i)

if __name__ == '__main__':
    N = int(input())
    solution(N)



    
