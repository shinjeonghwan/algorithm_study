#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

int N, M;
int board[302][302];
int tmp_board[302][302];
bool visited[302][302];
bool tmp_visited[302][302];

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

int answer = 0;
int is_splited = 0;

void dfs(int y, int x) {
	tmp_visited[y][x] = true;

	for (int i = 0; i < 4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (tmp_board[ny][nx] != 0 && tmp_visited[ny][nx] == false && ny <= N && ny >= 0 && nx <= M && nx >= 0) {
			dfs(ny, nx);
		}
	}
}


int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> N >> M;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cin >> tmp_board[i][j];
		}
	}

	int ice_num = 0;
	while (true) {
		ice_num = 0;
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= M; j++) {
				board[i][j] = tmp_board[i][j];
				tmp_visited[i][j] = visited[i][j];
			}
		}
		is_splited = 0;
		answer++;
		
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= M; j++) {
				if (board[i][j] != 0) {
					int zero_cnt = 0;
					int ni, nj;
					for (int k = 0; k < 4; k++) {
						ni = i + dy[k];
						nj = j + dx[k];
						if (board[ni][nj] == 0) {
							zero_cnt++;
						}
					}
					tmp_board[i][j] -= zero_cnt;
					if (tmp_board[i][j] <= 0) tmp_board[i][j] = 0;
					else ice_num++;
				}
			}
		}

		if (ice_num == 0) {
			printf("0\n");
			break;
		}

		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= M; j++) {
				if (tmp_board[i][j] != 0 && tmp_visited[i][j] == false) {  //tmp_board에서 0이 아니고, 방문한 적이 없으면 수행
					dfs(i, j);
					is_splited++;
				}
			}
		}

		if (is_splited >= 2) {
			printf("%d\n", answer);
			break;
		}
	}


	return 0;
}
