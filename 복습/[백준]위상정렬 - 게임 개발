#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int N, M;
vector<int> result_times;
vector<int> times;
vector<int> inDegree;
vector<vector<int>> graph;
queue<int> Q;

vector<int> tmp_vector;

int s, e;
int idx = 1;
int num;


int max_time(int A, int B){
    if(A>B) return A;
    return B;
}

int main(){
    scanf("%d", &N);

    graph.assign(N + 1, vector<int>(0, 0));
    inDegree.assign(N + 1, 0);
    times.assign(N+1, 0);
    result_times.assign(N+1, 0);

    for(int i = 0; i < N; i++){
        while(true){
            scanf("%d", &num);
            if (num == -1){
                break;
            }
            tmp_vector.push_back(num);
        }

        times[idx] = tmp_vector[0];
        for(int j = 1; j < tmp_vector.size(); j++){
            graph[tmp_vector[j]].push_back(idx);
            inDegree[idx]++;
        }
        idx++;
        tmp_vector.clear();

    }

    for(int i = 1; i <= N; i++){
        if(inDegree[i] == 0) {
            Q.push(i);
            result_times[i] = times[i];
        }
    }

    while(Q.empty()==0){
        int cur = Q.front();
        Q.pop();
        for(int k = 0; k < graph[cur].size(); k++){
            int next = graph[cur][k];
            result_times[next] = max_time(result_times[next], result_times[cur] + times[next]);

            if(--inDegree[next] == 0){
                Q.push(next);

            }
        }
    }

    for(int i = 1; i <= N; i++){
        printf("%d\n", result_times[i]);
    }



    return 0;
}
