#include <iostream>
#include <vector>
#include <queue>
#include <climits>

const int INF = INT_MAX;

using namespace std;

int V, E, start;
struct e_t{
    int node;
    int cost;
    e_t(int _node, int _cost) : node(_node), cost(_cost) {}
    bool operator<(const e_t &ref) const{
        return this->cost > ref.cost;     // c++에서는 기본적으로 max heap이기 때문에 min heap으로 동작시키려면 부등호의 방향이 < 에서 >로 변경해주어야 한다.
    }
};

vector<e_t> AL[20001];

long long Visited[20001];  //해당 정점의 최단 도착 코스트 저장


int main(){
    scanf("%d %d", &V, &E);
    scanf("%d", &start);
    int a, b, c;
    for (int i = 0; i< E; i++){
        scanf("%d %d %d", &a, &b, &c);
        //AL[a].push_back({b,c});
        AL[a].push_back(e_t(b,c));
    }

    // processing (다익스트라)
    priority_queue<e_t> PQ; // cost에 대한 min heap 형태로 동작해야 함.



    for(int i = 1; i <= V; i++){    //초기값 설정
        Visited[i] = INF;
    }

    Visited[start] = 0;
    PQ.push(e_t(start, 0));


    while(!PQ.empty()){
        e_t cur = PQ.top();
        PQ.pop();
        for(e_t next : AL[cur.node]){
            int cost = cur.cost + next.cost;
            if (cost < Visited[next.node]){
                Visited[next.node] = cost;
                PQ.push(e_t(next.node, cost));
            }
        }
    }


    for (int i = 1; i<=V; i++){
        if (Visited[i] == INF){
            printf("INF\n");
        }
        else{
            printf("%d\n",Visited[i]);
        }
    }
    return 0;
}

