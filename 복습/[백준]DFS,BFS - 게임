#include <iostream>
#include <vector>
#include <string>
using namespace std;

int graph[50][50] = {};
int visited[50][50] = {};
int N, M;
int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, -1, 0, 1};

bool is_cycle = false;


int DFS(int x, int y){

    if (y >= N || y < 0 || x >= M || x < 0 || graph[y][x] == -1 || is_cycle == true){
        return 0;
    }
    int cal = -1;

    if(visited[y][x] == -1){

        visited[y][x] = 0;
        for(int i = 0; i<4; i++){
            int nx = x + dx[i] * graph[y][x];
            int ny = y + dy[i] * graph[y][x];

            int r = DFS(nx, ny) + 1;
            if (cal < r){
                cal = r;
            }
        }

        visited[y][x] = cal;
        return cal;
    }

    else if(visited[y][x] == 0){
        is_cycle = true;
        return 0;
    }

    else{
        return visited[y][x];
    }

}





int main() {

    char num;
    int tmp = 0;
    scanf("%d %d ", &N, &M);

    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            scanf("%c", &num);
            if (num == 'H'){
                tmp = -1;
            }
            else{
                //tmp = atoi(&num);
                tmp = num - '0';
            }
            graph[i][j] = tmp;
        }
        scanf("%c", &num); // \n을 처리해주기 위해 사용
    }
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
                visited[i][j] = -1;
        }
    }
    is_cycle = false;
    int answer = 0;
    answer = DFS(0, 0);

    if (is_cycle) printf("-1");
    else printf("%d\n", answer);

    return 0;
}
