import math
import sys
from collections import defaultdict
from collections import deque
import itertools
from itertools import combinations
sys.setrecursionlimit(1000000000)

def solution(N, home_list):
    d = [[1001] * 3 for _ in range(N)]

    d[0][0] = home_list[0][0]
    d[0][1] = home_list[0][1]
    d[0][2] = home_list[0][2]

    for i in range(1, N):
        for j in range(3):
            if j == 0:
                d[i][j] = min(home_list[i][j] + d[i-1][1], home_list[i][j] + d[i-1][2])
            elif j == 1:
                d[i][j] = min(home_list[i][j] + d[i-1][0], home_list[i][j] + d[i-1][2])
            elif j == 2:
                d[i][j] = min(home_list[i][j] + d[i-1][0], home_list[i][j] + d[i-1][1])


    print(min(d[-1]))

if __name__ == '__main__':
    N = int(sys.stdin.readline().rstrip())
    home_list = []

    for _ in range(N):
        R, G, B = map(int, sys.stdin.readline().split())
        home_list.append([R, G, B])

    solution(N, home_list)
