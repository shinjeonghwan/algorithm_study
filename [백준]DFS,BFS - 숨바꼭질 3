from collections import deque
def solution(N, M):
    def BFS(N, M):
        max_step = 100001
        graph = [[0, 0] for _ in range(max_step)]
        Q = deque()
        Q.append((N))
        graph[N][0] = 0
        graph[N][1] = 1

        while Q:
            x = Q.popleft()
            if x == M:
                break

            n2x = x*2
            if n2x <= max_step and graph[n2x][1] == 0:
                Q.appendleft(n2x)
                graph[n2x][0] = graph[x][0]
                graph[n2x][1] = 1


            for nx in [x+1, x-1]:
                if 0 <= nx < max_step and graph[nx][1] == 0:
                    Q.append(nx)
                    graph[nx][0] = graph[x][0] + 1
                    graph[nx][1] = 1

        print(graph[M][0])
    BFS(N, M)

if __name__ == '__main__':
    N, M = map(int, input().split())
    solution(N, M)
