from collections import deque
def solution(N, M, graph, visited):
    def BFS(N, M, Q, graph, visited, target):
        dx = [-1, 1, 0, 0]
        dy = [0, 0, -1, 1]
        step_cnt = 1
        while Q:
            x, y = Q.popleft()
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                if 0 <= nx < N and 0 <= ny < M and graph[ny][nx] == target and visited[ny][nx] == False:
                    step_cnt += 1
                    visited[ny][nx] = True
                    Q.append((nx, ny))
        return step_cnt*step_cnt

    res = [0, 0]
    for i in range(M):
        for j in range(N):
            Q = deque()
            if visited[i][j] == False:
                Q.append((j, i))
                visited[i][j] = True
                target = graph[i][j]
                force = BFS(N, M, Q, graph, visited, target)
                if target == 'W':
                    res[0] += force
                else:
                    res[1] += force

    for i in res:
        print(i, end=' ')

if __name__ == '__main__':
    N, M = map(int, input().split())
    graph = []
    for i in range(M):
        graph.append(list(input()))
    visited = [[False]*N for i in range(M)]
    solution(N, M, graph, visited)
