#include <iostream>
#include <deque>
#include <algorithm>

using namespace std;

struct e_t {
	int row;
	int col;
	int value;
	e_t(int Row, int Col, int Value) : row(Row), col(Col), value(Value) {};
};

deque<e_t> united_list;

int dr[4] = { 0, -1, 1, 0 };
int dc[4] = { -1, 0, 0, 1 };

int Board[101][101];
bool visited[101][101];

int N, L, R;
int answer;
bool Flag = false;


void BFS(int r, int c) {

	visited[r][c] = true;
	deque<e_t> Q;
	united_list.push_back(e_t(r, c, Board[r][c]));
	Q.push_back(e_t(r, c, Board[r][c]));

	while (!Q.empty()) {
		int cur_r = Q.front().row;
		int cur_c = Q.front().col;
		int cur_val = Q.front().value;
		Q.pop_front();

		for (int i = 0; i < 4; i++) {
			int nr = cur_r + dr[i];
			int nc = cur_c + dc[i];

			if (nr > 0 && nr <= N && nc > 0 && nc <= N && visited[nr][nc] == false && abs(cur_val - Board[nr][nc]) >= L && abs(cur_val - Board[nr][nc]) <= R) {
				visited[nr][nc] = true;
				Q.push_back(e_t(nr, nc, Board[nr][nc]));
				united_list.push_back(e_t(nr, nc, Board[nr][nc]));
				Flag = true;
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> L >> R;

	for (int i = 0; i < 101; i++) {
		for (int j = 0; j < 101; j++) {
			Board[i][j] = -1;
		}
	}


	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			int tmp;
			cin >> tmp;
			Board[i][j] = tmp;
		}
	}


	while (!Flag) {
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				//BFS 시작.
				if (visited[i][j] == false) {
					BFS(i, j);

					int sum_of_list = 0;
					for (auto country : united_list) {
						sum_of_list += country.value;
					}
					sum_of_list = sum_of_list / united_list.size();

					for (auto country : united_list) {
						Board[country.row][country.col] = sum_of_list;
					}

					// BFS 한 번은 수행했으면
					united_list.clear();
				}
			}
		}

		if (Flag) {
			answer++;
			// 다음 번도 수행해야 하므로.
			Flag = false;
			for (int i = 0; i <= 100; i++) {
				for (int j = 0; j <= 100; j++) {
					visited[i][j] = false;
				}
			}
		}
		else {
			// 반복문 종료
			break;
		}
	}



	cout << answer;
	return 0;
}
