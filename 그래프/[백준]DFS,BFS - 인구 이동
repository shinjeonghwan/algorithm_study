#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

struct e_t {
	int row;
	int col;
	e_t (int R, int C) : row(R), col(C) {}
};


int board[51][51];
bool visited[51][51];

vector< vector<e_t> > union_vector;
vector< e_t > tmp_vector;
queue< e_t > Q;

int dx[4] = { 1, 0 ,-1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int N, L, R;
int answer;
bool game_over = false;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> L >> R;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> board[i][j];
		}
	}

	while (!game_over) {
		game_over = true;   // 얘를 끄기 위해서는 union_vector의 tmp_vector가 최소 2개이상(연합)을 이루어야 한다.

		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				if(visited[i][j] == false){
					tmp_vector.clear();
					visited[i][j] = true;
					Q.push(e_t(i, j));
					tmp_vector.push_back(e_t(i, j));

					while (!Q.empty()) {
						e_t cur = Q.front();
						Q.pop();

						for (int k = 0; k < 4; k++) {
							int nx = cur.row + dx[k];
							int ny = cur.col + dy[k];

							if (nx >= 1 && nx <= N && ny >= 1 && ny <= N && visited[nx][ny] == false && abs(board[cur.row][cur.col] - board[nx][ny]) >= L && abs(board[cur.row][cur.col] - board[nx][ny]) <= R) {
								visited[nx][ny] = true;
								Q.push(e_t(nx, ny));
								tmp_vector.push_back(e_t(nx, ny));
							}
						}
					}
					union_vector.push_back(tmp_vector);
				}
			}
		}

		for (int u = 0; u < union_vector.size(); u++) {
			if (union_vector[u].size() != 1) {
				game_over = false;
				break;
			}
		}

		if (!game_over) {    // 연합을 이루고 있으면,  board 업데이트 및 visited false로 초기화.
			answer++;

			// 연합 계산 및 board 업데이트
			for (int u = 0; u < union_vector.size(); u++) {
				int tmp_sum = 0;
				for (int t = 0; t < union_vector[u].size(); t++) {
					tmp_sum += board[union_vector[u][t].row][union_vector[u][t].col];
				}

				tmp_sum = tmp_sum / union_vector[u].size();

				for (int t = 0; t < union_vector[u].size(); t++) {
					board[union_vector[u][t].row][union_vector[u][t].col] = tmp_sum;
				}
			}

			union_vector.clear();


			// visited 초기화
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					visited[i][j] = false;
				}
			}
		}
	}

	cout << answer;

	return 0;
}
