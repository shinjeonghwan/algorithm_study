#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

// DFS의 여러가지 특성을 이용하는 문제
// 방문 중인 노드에 다시 방문하면 == 사이클 존재
// 방문 완료를 찍으면서 이 전 노드로 가면서 +1 해주는 것 == 종료 시점을 확인 == step 값 표현


int N, M;
int board[51][51];
char spot;
int visited[51][51];   // -1 : 미방문, 0 : 방문 중, 숫자 : 방문 완료 및 숫자 만큼의 이동 거리 체크.
int ans;

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, -1, 0, 1 };

bool is_cycle = false;


int dfs(int x, int y) {   //직관적으로 (x,y) 꼴로 넣어주지만, board, visited 같이 2차원배열에 인자로 넣어줄 때는 (y,x)로 넣어줘야 함.
	if (y > N || y < 1 || x > M || x < 1 || board[y][x] == -1 || is_cycle == true) {
		return 0;
	}

	int cal = -1;

	if (visited[y][x] == -1) {  //미방문이면
		visited[y][x] = 0;       //방문중으로 바꾸고!

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i] * board[y][x];
			int ny = y + dy[i] * board[y][x];

			int r = dfs(nx, ny) +1;  // 4방향에 대해서 탐색, 한 번 더 동작했으므로 +1
			if (cal < r) {
				cal = r;
			}
		}

		visited[y][x] = cal;  //현재 발판까지 오기위한 step의 최대 값을 넣어줌.
		return cal;
	}

	else if (visited[y][x] == 0) {  //다른 루트에서 방문중인데, 현 루트(x,y)에서 방문했다면, 사이클이 존재한다는 뜻.
		is_cycle = true;
		return 0;
	}
	else {
		return visited[y][x];
	}
}


int main() {
	scanf("%d %d ", &N, &M);    //뒤에 %c로 한 글자 받아오기 때문에, N, M 입력 후 \n을 빼주기 위해 scanf에서 ("%d %d ") M이후 한 칸 띄워줘야함.
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			scanf("%c", &spot);
			if (spot == 'H') {
				board[i][j] = -1;
			}
				
			else {
				board[i][j] = spot - '0';
			}
		}
		scanf("%c", &spot);
	}

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			visited[i][j] = -1;
		}
	}

	ans = dfs(1,1);

	if (is_cycle) printf("-1");
	else printf("%d\n", ans);

	return 0;
}
