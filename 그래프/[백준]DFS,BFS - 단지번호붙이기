#include <iostream>
#include <string>
#include <vector>
#include <deque>
#include <algorithm>

using namespace std;

struct Node {
    int x;
    int y;
    Node(int X, int Y) : x(X), y(Y) {}
};

int dx[4] = { 1, -1, 0 , 0 };
int dy[4] = { 0, 0, 1 , -1 };

int N;
int BFS_res;
int board[26][26];
vector<int> result;
bool visited[26][26];
char tmp;


int BFS(int i, int j) {
    deque<Node> Q;
    Q.push_back(Node(i, j));
    int cnt = 1;
    visited[i][j] = true;
    while (!Q.empty()) {
        Node cur = Q.front();
        Q.pop_front();
        for(int i =0 ; i < 4; i++){
            int nx = cur.x + dx[i];
            int ny = cur.y + dy[i];
            if (nx >= 0 && nx < N && ny >= 0 && ny < N && visited[nx][ny] == false && board[nx][ny] == 1) {
                Q.push_back(Node(nx, ny));
                cnt++;
                visited[nx][ny] = true;
            }
        }
    }
    return cnt;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> N;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> tmp;
            board[i][j] = tmp - '0';
        }
    }


    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (visited[i][j] == false && board[i][j] == 1) {
                BFS_res = BFS(i, j);
                result.push_back(BFS_res);
            }
        }
    }
    cout << result.size() << '\n';

    sort(result.begin(), result.end());

    for (int i = 0; i < result.size(); i++) {
        cout << result[i] << '\n';
    }

    return 0;
}
