from collections import deque
def solution(N, M, K, graph, visited):
    x1, y1, x2, y2 = map(int, input().split())
    x1 = x1-1
    y1 = y1-1
    x2 = x2-1
    y2 = y2-1

    #BFS로 풀이
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]
    Q = deque()
    Q.append((x1, y1))
    visited[x1][y1] = 0

    while Q:
        x, y = Q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            nk = 1
            while nk <= K and 0 <= nx < N and 0 <= ny < M and graph[nx][ny] == '.' and visited[nx][ny] > visited[x][y]:
                if visited[nx][ny] == float('inf'):
                    Q.append((nx, ny))
                    visited[nx][ny] = visited[x][y] + 1

                nx += dx[i]
                ny += dy[i]
                nk += 1

    if visited[x2][y2] != float('inf'):
        print(visited[x2][y2])
    else:
        print(-1)

if __name__ == '__main__':
    N, M, K= map(int, input().split())
    graph = []
    visited = [[float('inf')]*M for i in range(N)]

    for i in range(N):
        data = list(input())
        graph.append(data)

    solution(N, M, K, graph, visited)
