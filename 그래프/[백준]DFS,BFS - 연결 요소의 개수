#include <iostream>
#include <string>
#include <vector>
#include <deque>
#include <algorithm>

using namespace std;

struct e_t {
	int x;
	int y;
	e_t(int X, int Y) : x(X), y(Y) {}
};

int dx[8] = { 1, -1, 0 , 0, 1, -1, -1, 1 };
int dy[8] = { 0, 0, 1 , -1, 1, -1, 1, -1 };

int N, M;
vector<int> board[1001];
vector<int> result;
bool visited[1001];
int tmp_u, tmp_v;
int cnt = 0;

void DFS(int start_v) {
	visited[start_v] = true;
	for (int i = 0; i < board[start_v].size(); i++) {
		if (visited[board[start_v][i]] == false) {
			DFS(board[start_v][i]);
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;

	for (int i = 0; i < M; i++) {
		cin >> tmp_u >> tmp_v;
		board[tmp_u].push_back(tmp_v);
		board[tmp_v].push_back(tmp_u);
	}

	for (int i = 1; i <= N; i++) {
		if (visited[i] == false) {
			DFS(i);
			cnt++;
		}
	}
	cout << cnt;

	return 0;
}
