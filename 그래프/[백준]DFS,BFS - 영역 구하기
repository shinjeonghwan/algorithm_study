import math
import sys
from collections import defaultdict
from collections import deque
import itertools
from itertools import combinations
sys.setrecursionlimit(1000000000)

cnt = 0

def solution(M, N, K):
    def DFS(y, x):
        dx = [-1, 0, 1, 0]
        dy = [0, -1, 0, 1]
        if x <= -1 or x >= N or y <= -1 or y >= M:
            return False

        if graph[y][x] == 0:
            global cnt
            cnt +=1
            graph[y][x] = 1

            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                DFS(ny, nx)
            return True
        return False


    graph = [[0] * N for i in range(M)]

    for i in range(K):
        sx, sy, ex, ey = map(int, sys.stdin.readline().split())
        for j in range(sx, ex):
            for k in range(sy, ey):
                graph[k][j] = 1

    res = []
    space_cnt = 0
    for i in range(N):
        for j in range(M):
            if DFS(j, i) == True:
                space_cnt +=1
                global cnt
                res.append(cnt)
                cnt = 0

    print(space_cnt)
    res.sort()
    for i in res:
        print(i, end=" ")



if __name__ == '__main__':
    M, N, K = map(int, sys.stdin.readline().split())
    solution(M, N, K)
