from collections import deque
def solution(N, M, graph, visited):
    def BFS(N, M, Q, graph, visited):
        dx = [-1, 1, 0, 0]
        dy = [0, 0, -1, 1]
        step_cnt = 1
        while Q:
            x, y = Q.popleft()
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                if 0 <= nx < N and 0 <= ny < M and graph[nx][ny] == 1 and visited[nx][ny] == False:
                    visited[nx][ny] = True
                    Q.append((nx, ny))
                    step_cnt += 1
        return step_cnt

    max = 0
    for i in range(N):
        for j in range(M):
            Q = deque()
            if visited[i][j] == False and graph[i][j] == 1:
                Q.append((i, j))
                visited[i][j] = True
                force = BFS(N, M, Q, graph, visited)
                if force >= max:
                    max = force

    print(max)

if __name__ == '__main__':
    N, M, K= map(int, input().split())
    graph = [[0]*M for i in range(N)]
    visited = [[False]*M for i in range(N)]

    for i in range(K):
        r, c = map(int, input().split())
        r, c = r-1, c-1
        graph[r][c] = 1

    solution(N, M, graph, visited)
