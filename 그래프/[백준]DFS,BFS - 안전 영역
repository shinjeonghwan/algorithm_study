import copy
import math
import sys
from collections import defaultdict
from collections import deque
import itertools
from itertools import combinations
sys.setrecursionlimit(1000000000)

def solution(N):
    def DFS(x, y, m):
        dx = [-1, 0, 1, 0]
        dy = [0, -1, 0, 1]
        if x <= -1 or x >= N or y <= -1 or y >= N:
            return False

        if t_graph[x][y] > m:
            t_graph[x][y] = 0
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                DFS(nx, ny, m)
            return True
        return False

    graph = []
    ans = 0
    max_height = 0

    for i in range(N):
        source = list(map(int, sys.stdin.readline().split()))
        graph.append(source)
        max_height = max(max_height, max(source))

    for m in range(max_height):
        cnt = 0
        t_graph = copy.deepcopy(graph)
        for i in range(N):
            for j in range(N):
                if DFS(i, j, m):
                    cnt += 1
        ans = max(ans, cnt)

    print(ans)


if __name__ == '__main__':
    N = int(sys.stdin.readline())
    solution(N)
