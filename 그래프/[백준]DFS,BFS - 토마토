#include <iostream>
#include <string>
#include <vector>
#include <deque>
#include <algorithm>

using namespace std;

struct e_t {
	int x;
	int y;
	e_t(int X, int Y) : x(X), y(Y) {}
};

int dx[4] = { 1, -1, 0 , 0 };
int dy[4] = { 0, 0, 1 , -1 };

int N, M;
int board[1001][1001];
bool visited[1001][1001];
char tmp;
bool ferment_chk;
int ripped_tomato_cnt;
int prev_ripped_tomato_cnt;
int ans;


int BFS(int row, int col) {
	int BFS_chk = 0;
	deque<e_t> Q;
	Q.push_back(e_t(row, col));
	visited[row][col] = true;

	while (!Q.empty()) {
		e_t cur = Q.front();
		Q.pop_front();

		for (int i = 0; i < 4; i++) {
			int nx = cur.x + dx[i];
			int ny = cur.y + dy[i];

			if (nx >= 1 && nx <= N && ny >= 1 && ny <= M && board[nx][ny] == 0) {
				Q.push_back(e_t(nx, ny));
				visited[nx][ny] = true;
				board[nx][ny] == 1;
				//이번 회차에 익힌 토마토 갯수
				BFS_chk++;
			}
		}
	}
	return BFS_chk;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> M >> N;

	for (int i = 0; i <= 1000; i++) {
		for (int j = 0; j <= 1000; j++) {
			board[i][j] = -1;
		}
	}

	for (int i = 1; i <= M; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> tmp;
			board[i][j] = tmp;
			if (tmp == -1) {
				ripped_tomato_cnt++;
			}
		}
	}

	if (ripped_tomato_cnt == 0) {
		return 0;
	}
	else {
		while (prev_ripped_tomato_cnt != ripped_tomato_cnt) {
			prev_ripped_tomato_cnt = ripped_tomato_cnt;

			for (int i = 0; i < M; i++) {
				for (int j = 0; j < N; j++) {
					if (visited[i][j] == false && board[i][j] == 1) {
						ripped_tomato_cnt += BFS(i, j);
					}
				}
			}

			for (int i = 0; i <= 1000; i++) {
				for (int j = 0; j <= 1000; j++) {
					visited[i][j] = false;
				}
			}
			ans++;
		}
	}


	cout << ans;

	return 0;
}
