def solution(n, computers):
    answer = 0
    discovered = []
    
    def dfs(idx):
        if idx in discovered:
            return 
        
        discovered.append(idx)

        for idx2 in range(n):
            if computers[idx][idx2] == 1:
                dfs(idx2)
            else:
                continue
                
    
    for idx in range(n):
        if idx in discovered:
            continue
        dfs(idx)
        answer += 1
    
    return answer


=========================================================================


#include <string>
#include <vector>
#include <queue>

using namespace std;

vector<int>graph[201];
queue<int>Q;
bool visited[201];
int answer = 0;

int solution(int n, vector<vector<int>> computers) {
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if(i == j) continue;
            if(computers[i][j] == 1) graph[i].push_back(j);
        }
    }
    
    for(int i = 0; i < n; i++){
        if(visited[i] == false){
            Q.push(i);
            visited[i] = true;
            answer++;
        }
        //printf("i %d\n", i);
        while(!Q.empty()){
            int cur_node = Q.front();
            Q.pop();
            for(int next : graph[cur_node]){
                //printf("cur %d\n", cur_node);
                //printf("next %d\n",next);
                if(visited[next] == false){
                    visited[next] = true;
                    Q.push(next);
                }
            }
        }
    }
    
    
    
    
    
    return answer;
}
