#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <deque>

using namespace std;

struct Node {
	int y;
	int x;
	Node(int Y, int X) : y(Y), x(X) {}
};



int board[101][101];
int tmp_board[101][101];
int visited[101][101];

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };


int R, C;
int num;
int time_answer;
int cheese_answer;
int prev_cheese_answer;
bool cheese_chk;


void bfs(int i, int j) {
	deque<Node> Q;
	Q.push_back(Node(i, j));
	visited[i][j] = true;
	tmp_board[i][j] = 3;

	while (!Q.empty()) {
		Node cur = Q.front();
		Q.pop_front();

		for (int i = 0; i < 4; i++) {
			int ny = cur.y + dy[i];
			int nx = cur.x + dx[i];

			if (ny >= 1 && ny <= R && nx >= 1 && nx <= C && visited[ny][nx] == false && board[ny][nx] == 4) {
				visited[ny][nx] = true;
				Q.push_back(Node(ny, nx));
				tmp_board[ny][nx] = 3;
			}
		}
	}
}



int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	// 치즈 아이디어
	// (1,1) 위치서부터 BFS를 하여 의미가 있는 공기층을 특정 가능. tmp_board[][]에 저장
	// tmp_board[][] 전수조사를 돌면서 치즈(1)가 특정된 공기층(3)에 4방향 중 어떤 방향이라도 맞닿아있으면, 특정된 공기 영역이 넓어지는 것이므로 특정된 공기 처리(3) 해서 board[][]에 바로 저장.
	// 전수조사 끝나면 board[][] 또 돌려서 tmp_board[][]에 의미있는 공기층 전달.
	// 매 판 board[][]는 전수조사. 현재 남아있는 치즈 값 계산 및 몇 초 지났는 지 확인

	cin >> R >> C;

	for (int i = 1; i <= R; i++) {
		for (int j = 1; j <= C; j++) {
			cin >> num;
			if (num == 0) num = 4; // 4는 공기를 뜻함.
			board[i][j] = num;
			tmp_board[i][j] = num;
		}
	}

	for (int i = 1; i <= R; i++) {
		for (int j = 1; j <= C; j++) {
			if (board[i][j] == 1) {
				cheese_answer += 1;
			}
		}
	}
	
	if (cheese_answer == 0) {
		cout << 0 << '\n' << 0;
		return 0;
	}

	while (true) {
		//치즈 제거 처리 시작
		time_answer++;
		prev_cheese_answer = cheese_answer;
		cheese_answer = 0;
		cheese_chk = false;


		bfs(1, 1); // 바깥쪽 공기 특정

		//공기와 맞닿아 있는 치즈를 식별하고, 그때의 치즈를 공기로 변환함. (어차피 사라질 애들)
		for (int i = 1; i <= R; i++) {
			for (int j = 1; j <= C; j++) {
				if (tmp_board[i][j] == 1) {
					for (int k = 0; k < 4; k++) {
						int si = i + dy[k];
						int sj = j + dx[k];

						if (tmp_board[si][sj] == 3) {
							tmp_board[i][j] = 4;
							break;
						}
					}
				}
			}
		}

		//tmp_board[][] 정보와 visited[][] 정보, board[][]정보를 수정
		for (int i = 1; i <= R; i++) {
			for (int j = 1; j <= C; j++) {
				if (tmp_board[i][j] == 3) {
					tmp_board[i][j] = 4;
				}
				board[i][j] = tmp_board[i][j];
				visited[i][j] = false;
			}
		}

		for (int i = 1; i <= R; i++) {
			for (int j = 1; j <= C; j++) {
				if (board[i][j] == 1) {
					cheese_answer += 1;
				}
			}
		}

		if (cheese_answer == 0) {
			cout << time_answer << '\n' << prev_cheese_answer;
			break;
		}
	}

	return 0;
}
