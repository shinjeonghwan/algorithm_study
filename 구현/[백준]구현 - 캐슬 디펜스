#include <iostream>
#include <deque>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;

struct e_t {
	int row;
	int col;
	int arrow_distance;
	e_t(int Row, int Col, int Arrow_Dist) : row(Row), col(Col), arrow_distance(Arrow_Dist) {};
};

struct archer_pos {
	int archer_1;
	int archer_2;
	int archer_3;
	archer_pos(int A1, int A2, int A3) : archer_1(A1), archer_2(A2), archer_3(A3) {};
};

// 궁수 방향으로 이동할 필요는 굳이 없으니까?
int dr[3] = { 0, -1, 0 };
int dc[3] = { -1, 0, 1 };


//최대 범위 15에다가 궁수가 존재하는 성벽까지 추가로 계산해야 하므로 17
int Board[17][17];
int tmp_Board[17][17];
bool visited[17][17];

vector<archer_pos> arhcers_position;


int N, M, D;
int answer = 0;

void generateCombinations(int start, int depth, std::vector<int>& combination) {
	if (depth == 3) {
		arhcers_position.push_back(archer_pos(combination[0], combination[1], combination[2]));
		return;
	}

	for (int i = start; i <= M; ++i) {
		combination.push_back(i);
		generateCombinations(i+1, depth + 1, combination);
		combination.pop_back();
	}
}

e_t BFS(int ac_col) {
	// 최대 D까지 수행하는데 D 자체가 한계점인듯.

	visited[N + 1][ac_col] = true;
	deque<e_t> Q;
	Q.push_back(e_t(N + 1, ac_col, D));

	while (!Q.empty()) {
		auto cur = Q.front();
		Q.pop_front();

		for (int i = 0; i < 3; i++) {
			int nr = cur.row + dr[i];
			int nc = cur.col + dc[i];

			if (nr >= 1 && nc >= 1 && nc <= M && visited[nr][nc] == false && cur.arrow_distance > 0) {
				if (tmp_Board[nr][nc] == 1) {
					// 찾았음 끝
					return e_t(nr, nc, cur.arrow_distance);
				}
				else {
					// 못찾았음, D가 0될 때까지 더 탐색
					visited[nr][nc] = true;
					Q.push_back(e_t(nr, nc, cur.arrow_distance - 1));
				}
			}
		}
	}
	return e_t(0, 0, 0);
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M >> D;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			int tmp;
			cin >> tmp;
			Board[i][j] = tmp;
		}
	}

	vector<int> combination;
	generateCombinations(1, 0, combination);

	for (auto this_time : arhcers_position) {
		//이번 시행에 사용할 Board[][] 세팅
		for (int i = 0; i < 17; i++) {
			for (int j = 0; j < 17; j++) {
				tmp_Board[i][j] = Board[i][j];
			}
		}
		int this_answer = 0;

		while (true) {
			bool end_flag = true;

			for (int i = 0; i < 17; i++) {
				for (int j = 0; j < 17; j++) {
					visited[i][j] = false;
				}
			}
			auto enemy_pos_1 = BFS(this_time.archer_1);

			for (int i = 0; i < 17; i++) {
				for (int j = 0; j < 17; j++) {
					visited[i][j] = false;
				}
			}
			auto enemy_pos_2 = BFS(this_time.archer_2);

			for (int i = 0; i < 17; i++) {
				for (int j = 0; j < 17; j++) {
					visited[i][j] = false;
				}
			}
			auto enemy_pos_3 = BFS(this_time.archer_3);

			if (tmp_Board[enemy_pos_1.row][enemy_pos_1.col] == 1) {
				tmp_Board[enemy_pos_1.row][enemy_pos_1.col] = 0;
				this_answer++;
			}
			if (tmp_Board[enemy_pos_2.row][enemy_pos_2.col] == 1) {
				tmp_Board[enemy_pos_2.row][enemy_pos_2.col] = 0;
				this_answer++;
			}
			if (tmp_Board[enemy_pos_3.row][enemy_pos_3.col] == 1) {
				tmp_Board[enemy_pos_3.row][enemy_pos_3.col] = 0;
				this_answer++;
			}

			// 적군 +1 진군
			//for~~~~~
			for (int i = N; i >= 0; i--) {
				for (int j = 1; j <= M; j++) {
					tmp_Board[i + 1][j] = tmp_Board[i][j];
				}
			}

			for (int j = 0; j <= 16; j++) {
				tmp_Board[N + 1][j] = 0;
			}

			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= M; j++) {
					// 생존한 적군이 있다는 것
					if (tmp_Board[i][j] == 1) {
						end_flag = false;
						break;
					}
				}
			}
			// 생존한 적군이 하나도 없으면 while문 종료
			if (end_flag) {
				break;
			}
		}

		//answer 값 갱신 해줘야 함.
		answer = max(answer, this_answer);
	}
	cout << answer;
	return 0;
}
