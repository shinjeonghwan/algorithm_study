#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>

using namespace std;

deque<int> upper_velt_Durability;
deque<int> under_velt_Durability;

int Durability_0_Cnt;

int N, K;
int answer;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> K;

	vector<bool> is_Robot(N);

	for (int i = 0; i < N; i++) {
		int tmp;
		cin >> tmp;
		upper_velt_Durability.push_back(tmp);
	}

	for (int i = 0; i < N; i++) {
		int tmp;
		cin >> tmp;
		under_velt_Durability.push_back(tmp);
	}

	while (true) {
		answer++;

		//1단계
		int under_to_upper = 0;
		int upper_to_under = 0;
		
		under_to_upper = under_velt_Durability.back();
		under_velt_Durability.pop_back();
		
		upper_velt_Durability.push_front(under_to_upper);
		upper_to_under = upper_velt_Durability.back();
		upper_velt_Durability.pop_back();

		under_velt_Durability.push_front(upper_to_under);

		for (int i = N - 2; i >= 0; i--) {
			is_Robot[i + 1] = is_Robot[i];
		}

		is_Robot[0] = false;

		// 로봇 하차
		if (is_Robot[N - 1] == true) is_Robot[N - 1] = false;

		//2단계
		for (int i = N-2; i >= 0; i--) {
			// 로봇이 다음 칸으로 이동 가능하면 이동 후 내구도 계산
			if (is_Robot[i] == true && upper_velt_Durability[i+1] > 0 && is_Robot[i + 1] == false) {
				is_Robot[i] = false;
				is_Robot[i+1] = true;
				upper_velt_Durability[i + 1]--;
				int tmp = upper_velt_Durability[i + 1];
				if (tmp == 0) {
					Durability_0_Cnt++;
				}
			}
			// 로봇 하차 위치에서 하차
			if (is_Robot[N - 1] == true) {
				is_Robot[N - 1] = false;
			}
		}


		//3단계
		if (upper_velt_Durability.front() > 0) {
			int tmp = upper_velt_Durability.front() - 1;
			upper_velt_Durability.pop_front();
			upper_velt_Durability.push_front(tmp);
			
			is_Robot[0] = true;
			if (tmp == 0) {
				Durability_0_Cnt++;
			}
		}
		else {
			// 올리는 칸 위치 내구도가 0이므로 패스
		}

		//4단계
		if (Durability_0_Cnt >= K) {
			break;
		}
	}

	cout << answer;

	return 0;
}
