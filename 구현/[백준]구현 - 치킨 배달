import sys
from collections import Counter
from itertools import combinations
sys.setrecursionlimit(1000000000)


def solution(N, M, graph):
    home_list = []
    chicken_list = []

    for i in range(N):
        for j in range(N):
            if graph[i][j] == 1:
                home_list.append((i+1, j+1))
            elif graph[i][j] == 2:
                chicken_list.append((i+1, j+1))

    ideal_list = list(combinations(chicken_list, M))
    res_list = []

    for ch_list in ideal_list:
        dist_list = []
        for hx, hy in home_list:
            chicken_dist = 100
            for cx, cy in ch_list:
                chicken_dist = min(chicken_dist, abs(hx - cx) + abs(hy - cy))
            dist_list.append(chicken_dist)
        else:
            res_list.append(sum(dist_list))

    print(min(res_list))

if __name__ == '__main__':
    N, M = map(int, input().split())
    graph = [list(map(int, input().split())) for _ in range(N)]

    solution(N, M, graph)
