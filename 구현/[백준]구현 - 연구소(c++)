#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct e_t {
	int row;
	int col;
	e_t(int R, int C) : row(R), col(C) {}
};

int N, M;
int C;
int answer, tmp_answer;

int dx[4] = {1, 0, 0, -1};
int dy[4] = { 0, 1, -1, 0 };

vector<vector<int>> graph;
vector<vector<int>> tmp_graph;
vector<int> graph_row;
queue<e_t> Q;
vector<e_t> virus;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		graph_row.clear();
		for (int j = 0; j < M; j++) {
			cin >> C;
			graph_row.push_back(C);
			if (C == 2) {
				virus.push_back(e_t(i, j));
			}
		}
		graph.push_back(graph_row);
	}

	for (int i = 0; i < N * M; i++) {
		for (int j = i + 1; j < N * M; j++) {
			for (int k = j + 1; k < N * M; k++) {
				tmp_graph.clear();
				tmp_graph.assign(graph.size(), vector<int>(graph.size()));
				copy(graph.begin(), graph.end(), tmp_graph.begin());

				if (tmp_graph[i / M][i % M] == 0 && tmp_graph[j / M][j % M] == 0 && tmp_graph[k / M][k % M] == 0) {
					tmp_graph[i / M][i % M] = 1;
					tmp_graph[j / M][j % M] = 1;
					tmp_graph[k / M][k % M] = 1;
					for (int v = 0; v < virus.size(); v++) {
						Q.push(e_t(virus[v].row, virus[v].col));
					}

					while (!Q.empty()) {
						e_t cur = Q.front();
						Q.pop();

						for (int t = 0; t < 4; t++) {
							int nx = cur.col + dx[t];
							int ny = cur.row + dy[t];

							if (nx >= 0 && nx < M && ny >= 0 && ny < N && tmp_graph[ny][nx] == 0) {
								tmp_graph[ny][nx] = 2;
								Q.push(e_t(ny, nx));
							}
						}
					}
					for (int r = 0; r < N; r++) {
						for (int c = 0; c < M; c++) {
							if (tmp_graph[r][c] == 0) tmp_answer += 1;
						}
					}
					answer = max(answer, tmp_answer);
					tmp_answer = 0;
				}
			}
		}
	}
	cout << answer;

	return 0;
}
