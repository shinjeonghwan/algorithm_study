from collections import deque

def solution(priorities, location):
    answer = 0
    priority = deque(priorities)
    sorted_of_priority = sorted(priorities, reverse=True)
    sorted_of_priority = deque(sorted_of_priority)
    
    Q = deque()
    for i in range(len(priority)):
        if i == location:
            Q.append((priority[i], True))
        else:
            Q.append((priority[i], False))
    cnt = 0
    
    while True:
        num, picked = Q.popleft()
        if num == sorted_of_priority[0]:
            sorted_of_priority.popleft()
            cnt += 1
            if picked == True:
                print(cnt)
                break
        else:
            Q.append((num, picked))
    
    
    answer = cnt
    return answer
    
    
    
    ============================================================================
    def solution(priorities, location):
    answer = 0
    num_max = max(priorities)
    
    while True:
        num_max = max(priorities)
        if priorities[0] == num_max:
            priorities.pop(0)
            answer += 1
            
            if location == 0:
                break
            else:
                location -= 1
        else:
            k = priorities.pop(0)
            priorities.append(k)
            if location == 0:
                location = len(priorities) - 1
            else:
                location -= 1
        
    return answer
    
    
    
    
    
    ============================================================================
    
    def solution(priorities, location):
    jobs = len(priorities)
    answer = 0
    cursor = 0
    while True:
        if max(priorities) == priorities[cursor%jobs]:
            priorities[cursor%jobs] = 0
            answer += 1
            if cursor%jobs == location:
                break
        cursor += 1   
    return answer
    
    
